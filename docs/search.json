[{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://michaelchimento.github.io/STbayes/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"multi-network-models","dir":"Articles","previous_headings":"","what":"Multi-network models","title":"Advanced recipes","text":"create multi-network model, can just add columns networks data-frame. toy data-set two trials 3 individuals, define kin inverse distance network.","code":"event_data <- data.frame(     trial = rep(1:2, each = 3),     id = LETTERS[1:6],     time = c(2, 1, 3, 4, 2, 1),     t_end = c(3, 3, 3, 4, 4, 4) ) networks <- data.frame(     trial = rep(1:2, each = 3),     from = c(\"A\", \"A\", \"B\", \"D\", \"D\", \"E\"),     to = c(\"B\", \"C\", \"C\", \"E\", \"F\", \"F\"),     kin = c(1, 0, 1, 0, 1, 1), # first network     inverse_distance = c(0, 1, .5, .25, .1, 0) #second network ) data_list <- import_user_STb(    event_data = event_data,    networks = networks)"},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"individual-level-variables-ilvs","dir":"Articles","previous_headings":"","what":"Individual-level variables (ILVs)","title":"Advanced recipes","text":"Individual-level variables can either constant (e.g. age, sex) time-varying (e.g. body condition). define constant ILVs age, sex weight add toy dataset . data-frame ILV_c holds values individual. formatting id match event_data networks data-frames. moment, ILVs can continuous binary. normalize continuous variables, binary variables coded 0, 1. plan expand multi-category factors, moment must directly edit Stan code use . need explicitly tell STbayes variables additive (acting independently intrinsic social rates) multiplicative (effect estimated intrinsic social rates). , specified age acting independently intrinsic social rate, sex acting social rate, weight multiplicative effect. Thus, two betas estimated age, single beta estimated sex weight.","code":"ILV_c <- data.frame(     id = LETTERS[1:6],     age = c(-1, -2, 0, 1, 2, 3), # continuous variables should be normalized     sex = c(0, 1, 1, 0, 1, 0), # Factor ILVs must be input as numeric     weight = c(0.5, .25, .3, 0, -.2, -.4) ) STb_data <- import_user_STb(     event_data = event_data,     networks = networks,     ILV_c = ILV_c,     ILVi = c(\"age\"),     ILVs = c( \"age\", \"sex\"),     ILVm = c(\"weight\") )  model_obj = generate_STb_model(STb_data)"},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"time-varying-ilvs","dir":"Articles","previous_headings":"Individual-level variables (ILVs)","what":"Time-varying ILVs","title":"Advanced recipes","text":"add distance resource time-varying ILV. Similar dynamic networks, need summarized per inter-event interval. example, value dist_from_resource time=1 reflect average distance individual resource start observation period first event. , include additive effect intrinsic rate along age.","code":"ILV_tv <- data.frame(     trial = c(rep(1, each = 9),rep(2, each = 9)),     id = c(rep(LETTERS[1:3], each=3), rep(LETTERS[4:6], each=3)),     time = c(rep(1:3, times = 3), rep(1:3, times=3)),     dist_from_resource = rnorm(18) )  STb_data <- import_user_STb(     event_data = event_data,     networks = networks,     ILV_c = ILV_c,     ILV_tv = ILV_tv,     ILVi = c(\"age\", \"dist_from_resource\"),     ILVs = c(\"sex\"),     ILVm = c(\"weight\") )  model_obj = generate_STb_model(STb_data)"},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"transmission-weights","dir":"Articles","previous_headings":"","what":"Transmission weights","title":"Advanced recipes","text":"Transmission weights vital information can dramatically improve model fits data. NBDA models supported static transmission weights (wiw_i), usually rate behavioural usage. context cultural transmission, individuals rarely use novel behaviour much lower chance serving demonstrators others compared individuals frequently use . study disease transmission, might something like shedding rate. Transmission weights must 0 positive: wi≥0w_{}\\geq0, divide number behaviours ii produced duration individual ii knowledgeable. just need define dataframe information. static transmission weights, define: STbayes introduces possibility using dynamic transmission weights, can change time. Dynamic transmission weights defined additional time column. Similar dynamic networks, integer times correspond inter-event intervals. witw_{} number behaviours produced interval / duration interval: can included model : can mix match static/dynamic networks static/dynamic transmission weights.","code":"t_weights_static <- data.frame(     id = LETTERS[1:6],     t_weight = exp(rnorm(6)) ) t_weights_dynamic <- data.frame(     trial = c(rep(1, each = 9),rep(2, each = 9)),     id = c(rep(LETTERS[1:3], each=3), rep(LETTERS[4:6], each=3)),     time = c(rep(1:3, times = 3), rep(1:3, times=3)),     t_weight = exp(rnorm(18)) ) STb_data <- import_user_STb(     event_data = event_data,     networks = networks,     t_weights = t_weights_dynamic )"},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"varying-effects-by-individual","dir":"Articles","previous_headings":"","what":"Varying effects by individual","title":"Advanced recipes","text":"may apply varying effects individual intrinsic rate (lambda_0), social learning rate (s) ILVs. specifying specific parameter names using argument veff_ID call generate_STb_model() generate_STb_asocial_model: lambda_0 s, varying effects added onto main effect log scale. example, model calculate vector lambda_0 values individual transformed parameters block: exp(μlogλ0+𝐯ID,λ0) \\exp\\left(\\mu_{\\log \\lambda_0} + \\boldsymbol{v}_{\\text{ID}, \\lambda_0}\\right)  use values calculating likelihood model block.","code":"model = generate_STb_model(data_list, veff_ID = c(\"lambda_0\", \"s\"))"},{"path":[]},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"edge-weight-uncertainty","dir":"Articles","previous_headings":"","what":"Edge weight uncertainty","title":"Advanced recipes","text":"Rather using point estimates edge weights, possible import posterior distributions edge weights bayesian network models, fit bisonr package STRAND package. done providing single fits (list fits) import_user_STb().","code":"bisonr_fit <- STbayes::bisonr_fit  # network has 10 individuals, create mock diffusion data event_data <- data.frame(     trial = 1,     id = as.character(c(1:10)), #bison fits record ids as characters, even if numeric     time = sample(1:101, 10, replace = FALSE),     t_end = 100 ) data_list <- import_user_STb(event_data, networks = bisonr_fit) model <- generate_STb_model(data_list)  # it's also possible to do multi-network models.  # here i add two of the same just to illustrate data_list <- import_user_STb(event_data, networks = list(bisonr_fit, bisonr_fit)) model <- generate_STb_model(data_list)"},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"complex-transmission","dir":"Articles","previous_headings":"","what":"Complex transmission","title":"Advanced recipes","text":"STbayes can used fit create models complex transmission. can create log-likelihood includes frequency-dependent transmission rules using transmission_func argument generate_STb_model: package includes “freqdep_f” model frequency-dependent bias : (n knowledgeable associates)f(n knowledgeable associates)f+(n naive associates)f \\frac{(\\text{n knowledgeable associates})^f}      {(\\text{n knowledgeable associates})^f + (\\text{n naive associates})^f} STbayes also includes alternative parameterization “freqdep_k” based scaled version Dino Dini’s normalized tunable sigmoid function. first case, f<1 evidence anti-conformist transmission bias, f=1 proportional, f>1 conformist. second case, shape parameter k < 0 conformist, k=0 proportional, k>0 anti-conformist. parameterizations create similar relationship proportion informed neighbours weight information rate event happening given individual: might find one convergence issues, provide . Complex transmission can implemented varying effects, ilvs, oada ctada type models, etc.","code":"data_list = import_user_STb(STbayes::event_data, STbayes::edge_list) model_f = generate_STb_model(data_list, transmission_func=\"freqdep_f\") model_k = generate_STb_model(data_list, transmission_func=\"freqdep_k\")"},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"setting-priors","dir":"Articles","previous_headings":"","what":"Setting priors","title":"Advanced recipes","text":"might want customize priors model. default priors: adjust one , call generate_STb_model provide named list wish change priors argument. distributions written usual Stan convention. need supply wish change. example, might want tighten priors intrinsic rate, social rate beta params ILVs. moment, function always print priors possible specify, regardless type model creating. least makes easy reference names need .","code":"default_priors <- list(         log_lambda0 = \"normal(-4, 2)\", # intrinsic rate         log_sprime = \"normal(-4, 2)\", # social transmission rate         beta_ILV = \"normal(0,1)\", # beta coefficients for ILVs         log_f = \"normal(0,1)\", # exponent parameter under freqdep_f models         k_raw = \"normal(0,3)\", # k parameter under freqdep_k models         z_ID = \"normal(0,1)\", # varying effects         sigma_ID = \"normal(0,1)\", # SD of varying effects         rho_ID = \"lkj_corr_cholesky(3)\", # LKJ prior for veff corr matrix         gamma = \"normal(0,1)\" # gamma parameter for Weibull intrinsic hazard model     ) data_list = import_user_STb(STbayes::event_data, STbayes::edge_list) model <- generate_STb_model(data_list, priors = list(      log_lambda0 = \"normal(-4, 1)\",      log_sprime = \"uniform(-4, 1)\",      beta_ILV = \"normal(0, .5)\" ))"},{"path":"https://michaelchimento.github.io/STbayes/articles/advanced_recipes.html","id":"import-nbda-data-objects","dir":"Articles","previous_headings":"","what":"Import NBDA data objects","title":"Advanced recipes","text":"STbayes compatible NBDA objects. function try figure meant done ILVs. However, features STbayes require using import_user_STb generally encourage use new data format. Read NBDA object (taken Tutorial 4.1 Hasenjager et al. 2021) like :","code":"nbdaData_cTADA <- STbayes::tutorial4_1 data_list = import_NBDA_STb(nbdaData_cTADA) str(data_list)"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"step-1-importing-data","dir":"Articles","previous_headings":"","what":"Step 1: Importing data","title":"Getting started with STbayes","text":"STbayes minimally needs event data network data. Let’s first look event data. Event data gives information spreading behavior information must contain columns: id: Character numeric individual identities. trial: Character numeric column indicating trial event belongs . one trial data-set. time: Integer float indicating individual recorded first informed/knowledgeable. individual never learned observation period, set value duration observation period. treated right-censored individuals likelihood calculation. right censored individuals simulated data-set. t_end: Integer float indicating end observation period trial, denominated units time. Next let’s look network data: edge list gives network connections individual long format. can give sparse edge list doesn’t include dyads, importantly, individuals must accounted edge list. first three columns must : trial: Character numeric column indicating trial networks belong . : Character numeric column individual identities. : Character numeric column individual identities. remaining columns descriptively named integer float edge weights. making multi-network model, add many columns want. , one network named assoc. Let’s import data format can used STbayes functions. ’ve tried abstract away much complexity possible, please check function arguments sending data. default values might want! case, ’s simple—covariates single trial static network. can specify whether network directed undirected using network_type. defaults undirected. function quite bit behind scenes process raw observational data named list variables. ’ve tried optimize much possible shouldn’t take second two unless ’re using gigantic networks. Important bits include: Validates standardizes inputs. function confirms necessary columns present, maps individual trial identifiers across data frames. IDs present network data used reference data supply. example, ID edge list, event data, automatically added censored individual event_data. strongly suggest accounting individuals data provided function avoid surprises later analysis. Preprocesses event data. function sorts events time within trial assigns discrete time index used refer inter-event intervals. E.g. timestep=1 corresponds start observation period first event. high-res mode used, durations set 1. also calculates duration inter-event intervals. identifies demonstrators (time==0) right censored individuals (time>t_end). Preprocesses network data. static, single matrix used times. dynamic, aligns edge weights across trials inter-event intervals. high resolution, collapse data inter-event intervals, multiplying edge weights transmission weights dividing duration. fitting, term multiplied duration, linear transmission, equivalent running likelihood Stan every single time-step greatly speeds model fitting. note pre-processing possible complex transmission models. Preprocesses covariates. function recognizes stores roles ILVs affecting () intrinsic rate, social rate rates (multiplicative).","code":"event_data <- STbayes::event_data head(event_data) #> # A tibble: 6 × 4 #> # Groups:   time [6] #>      id  time t_end trial #>   <int> <dbl> <dbl> <dbl> #> 1    13    35   401     1 #> 2    30    37   401     1 #> 3    31    48   401     1 #> 4    16    63   401     1 #> 5    20    67   401     1 #> 6    38    69   401     1 edge_list <- STbayes::edge_list head(edge_list) #>   from to trial assoc #> 1    1  4     1     1 #> 2    1 11     1     1 #> 3    1 15     1     1 #> 4    1 17     1     1 #> 5    2  6     1     1 #> 6    2  7     1     1 data_list <- import_user_STb(event_data = event_data,                               networks = edge_list,                              network_type = \"undirected\") #> User supplied edge weights as point estimates 📍 #> No ILV supplied. #> User input indicates static network(s). If dynamic, include 'time' column. #> ░▒▓█►─═ Sanity check ═─◄█▓▒░ #> User provided data about: #> 50 individuals across 1 independent diffusions (trials). #> There were 50 individuals in each trial. #> User supplied 1 networks: assoc #> ILV for asocial learning: ILVabsent #> ILV for social learning: ILVabsent #> multiplicative model ILV: ILVabsent #> 🤔 Does that seem right to you?"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"step-2-generate-a-model","dir":"Articles","previous_headings":"","what":"Step 2: Generate a model","title":"Getting started with STbayes","text":"Next, can pass function automatically creates Stan code customised data modelling desires. time generate model, function display default priors ’ll use. can specify priors using argument priors give named list. returns long string containing code. argument gq indicates whether generated quantities block created. defaults TRUE, ’s needed output log-likelihood observations kind model comparison later. est_acqTime argument tells STbayes automatically generate code return posterior distribution estimated times events individual. quickly check model code R, just use cat(). Otherwise, recommend saving , formatting might need bit cleaning ’s readable: want directly modify code, go ahead. can supply file path model rather model_obj next call fit_STb(). , ’ll just use model stored variable.","code":"model_full <- generate_STb_model(data_list, gq = T, est_acqTime = T) #> Creating cTADA type model with the following default priors: #> log_lambda0 ~ normal(-4, 2) #> log_sprime ~ normal(-4, 2) #> beta_ILV ~ normal(0,1) #> log_f ~ normal(0,1) #> k_raw ~ normal(0,3) #> z_ID ~ normal(0,1) #> sigma_ID ~ normal(0,1) #> rho_ID ~ lkj_corr_cholesky(3) #> gamma ~ normal(0,1) write(model_full, file=\"../data/stan_models/my_first_model.stan\")"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"step-3-fit-and-save-the-model","dir":"Articles","previous_headings":"","what":"Step 3: Fit and save the model","title":"Getting started with STbayes","text":"supply data_list model_obj fitting model: function calls cmdstanr’s $sample(), can add extra valid arguments pass . call, ’ve made sure run 4 chains parallel 4000 iterations, update us progress every 1000 iterations. default, fit_STb() iter/2 worth warmup, iter/2 worth sampling. Fitting can take anywhere seconds hours depending computer amount data. Fitting dataset quick. ’s slow, might want try running friend’s computer. ’ve tried make things reasonably efficient, parallelized model block yet. strongly recommend using convenience function save output fitting. save fit object rda using something like save(), include data output chains, making useless. STb_save saves alongside fit single file: don’t provide name, use name object.","code":"full_fit <- fit_STb(data_list,     model_full,     parallel_chains = 4,     chains = 4,     cores = 4,     iter = 4000,     refresh=1000 ) #> Detected N_veff = 0 #> ⏳ Sampling... #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 3 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 4 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 3 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 4 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 1 finished in 18.4 seconds. #> Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 3 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 2 finished in 19.1 seconds. #> Chain 3 finished in 19.1 seconds. #> Chain 4 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 4 finished in 19.6 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 19.0 seconds. #> Total execution time: 19.8 seconds. #> 🫴 Use STb_save() to save the fit and chain csvs to a single RDS file. Or don't! STb_save(full_fit, output_dir = \"cmdstan_saves\", name=\"my_first_fit\") #> Fit & chains successfully saved 💾  #> You can load fit again with 👉 readRDS('cmdstan_saves/my_first_fit.rds')"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"step-4-viewing-model-output","dir":"Articles","previous_headings":"","what":"Step 4: Viewing model output","title":"Getting started with STbayes","text":"can inspect parameter estimates using convenience function : important output intrinsic rate (lambda_0), relative strength social transmission (s), whose interpretations NBDA package. relative strength social transmission (s = s_prime / lambda_0) generally ’re . percent_ST[1] estimated percentage events occurred social transmission. [1] refers “assoc” network, ’ve given single network. fit multi-network model, networks estimate. number reasons, STbayes actually fits lambda_0 social transmission rate (s_prime) log scale. linear transformation s_prime usually isn’t reported excluded output, calculate fit. point, just dealing cmdstanr fit, pipeline, adios! However, provided useful functions posterior predictive checks model comparison.","code":"STb_summary(full_fit, digits = 3) #>           Parameter Median   MAD CI_Lower CI_Upper ess_bulk ess_tail  Rhat #> 1 log_lambda_0_mean -6.890 0.449   -7.861   -6.098 4282.822 4278.253 1.000 #> 2  log_s_prime_mean -5.362 0.171   -5.702   -5.023 4088.823 3882.340 1.001 #> 3          lambda_0  0.001 0.000    0.000    0.002 4282.816 4278.253 1.000 #> 4                 s  4.658 2.357    1.200   12.194 3653.557 4211.818 1.000 #> 5     percent_ST[1]  0.820 0.045    0.713    0.891 3653.560 4211.818 1.000"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"step-5-posterior-predictive-checks","dir":"Articles","previous_headings":"","what":"Step 5: Posterior predictive checks","title":"Getting started with STbayes","text":"STbayes makes relatively painless perform posterior predictive checks (PPC) without manually simulate data fitting process. PPC important assess whether model reproduces features observed data make sure likelihood reasonably matches data-generating process. , used argument est_acqTime=T. Stan model runs, iteration generate estimated event time based parameter values iteration. , can make two types PPC.","code":""},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"cumulative-diffusion-curves","dir":"Articles","previous_headings":"Step 5: Posterior predictive checks","what":"Cumulative diffusion curves","title":"Getting started with STbayes","text":"can plot posterior distribution cumulative diffusion curves compare observed curve. First, create dataframe cumulative number individuals experienced event. Next, can extract draws estimated acquisition times, excluding warm-iterations, data-frame. can pivot long format calculate cumulative curves draw observed data. Note thinned draws sake visualization.  looks pretty good, observed curve falls within variation posterior draws. observed data fell outside draws, might want rethink model specification, whether influential variables excluded, whether might complex transmission processes.","code":"plot_data_obs <- event_data %>%     filter(time > 0, time <= t_end) %>% # exclude demonstrators (time == 0) and censored (time > t_end)     group_by(trial) %>%     arrange(time, .by_group = TRUE) %>%     mutate(         cum_prop = row_number() / n(),         type = \"observed\"     ) %>%     select(trial, time, cum_prop, type) %>%     ungroup()  # add in 0,0 starting point plot_data_obs <- bind_rows(     plot_data_obs,     plot_data_obs %>%         distinct(trial) %>%         mutate(time = 0, cum_prop = 0, type = \"observed\") ) %>%     arrange(trial, time) draws_df <- as_draws_df(full_fit$draws(variables = \"acquisition_time\", inc_warmup = FALSE))  # pivot longer ppc_long <- draws_df %>%     select(starts_with(\"acquisition_time[\")) %>%     pivot_longer(         cols = everything(),         names_to = c(\"trial\", \"ind\"),         names_pattern = \"acquisition_time\\\\[(\\\\d+),(\\\\d+)\\\\]\",         values_to = \"time\"     ) %>%     mutate(         trial = as.integer(trial),         ind = as.integer(ind),         draw = rep(1:(nrow(draws_df)), each = length(unique(.$trial)) * length(unique(.$ind)))     ) #> Warning: Dropping 'draws_df' class as required metadata was removed.  # thin sample for plotting sample_idx <- sample(c(1:max(ppc_long$draw)), 100) ppc_long <- ppc_long %>% filter(draw %in% sample_idx)  # build cumulative curves per draw plot_data_ppc <- ppc_long %>%     group_by(draw, trial, time) %>%     summarise(n = n(), .groups = \"drop\") %>%     group_by(draw, trial) %>%     arrange(time) %>%     mutate(cum_prop = cumsum(n) / data_list$Q)  # add in 0,0 starting point plot_data_ppc <- bind_rows(     plot_data_ppc,     plot_data_ppc %>%         distinct(trial, draw) %>%         mutate(time = 0, cum_prop = 0, type = \"ppc\") ) %>%     arrange(trial, time)  # plot it ggplot() +     geom_line(data = plot_data_ppc, aes(x = time, y = cum_prop, group = interaction(draw, trial)), alpha = .1) +     geom_line(data = plot_data_obs, aes(x = time, y = cum_prop), linewidth = 1) +     labs(x = \"Time\", y = \"Cumulative proportion informed\", color = \"Trial\") +     theme_minimal()"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"estimated-vs--observed-acquisition-times","dir":"Articles","previous_headings":"Step 5: Posterior predictive checks","what":"Estimated vs. observed acquisition times","title":"Getting started with STbayes","text":"individual, also compare estimated versus observed event times. STbayes’ function extract_acqTime conveniently extracts times individual re-aligns identities.  Due stochastic variation orders acquisition draws, cumulative curve approach probably useful PPC.","code":"acqdata = extract_acqTime(full_fit, data_list)  ggplot(acqdata, aes(x = observed_time, y = median_time)) +     geom_segment(         aes(x = observed_time, xend = observed_time, y = median_time, yend = observed_time),         color = \"red\",         alpha = 0.3) +     geom_point(size = 2) +     geom_abline(intercept = 0, slope = 1, color = \"black\", linetype = \"dashed\") +     labs(x = \"Observed time\", y = \"Estimated time\") +     theme_minimal()"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"step-6-model-comparison","dir":"Articles","previous_headings":"","what":"Step 6: Model comparison","title":"Getting started with STbayes","text":"Often, ’ll want make sure model social transmission predictive model excludes . First, let’s refit using constrained model includes intrinsic rate using argument model_type=\"asocial\" generating model. fair comparison, make sure chains iterations identical full model fit. familiar loo pipeline, can use compare models. STbayes provides convenient function performing model comparison. can provide many models want, just compare two. familiar leave--cross validation, strongly suggest reading , TLDR pay attention elpd_diff se_diff columns. model credibly predictive standard error differences ELPD cross 0. , -21.2 + 5.3 < 0, can conclude full model predictive --sample data asocial model. rather see graphically:  PSIS-LOO approximation LOO, observations pareto-k diagnostic values >.7 may indicate approximation unreliable. function warn case, can visually inspect diagnostics like :  pareto-k values danger zone.","code":"model_asoc = generate_STb_model(data_list, model_type=\"asocial\") #> Creating cTADA type model with the following default priors: #> log_lambda0 ~ normal(-4, 2) #> log_sprime ~ normal(-4, 2) #> beta_ILV ~ normal(0,1) #> log_f ~ normal(0,1) #> k_raw ~ normal(0,3) #> z_ID ~ normal(0,1) #> sigma_ID ~ normal(0,1) #> rho_ID ~ lkj_corr_cholesky(3) #> gamma ~ normal(0,1) asocial_fit = fit_STb(data_list,                       model_asoc,                       parallel_chains = 4,                       chains = 4,                       cores = 4,                       iter = 4000,                       refresh=1000) #> Detected N_veff = 0 #> ⏳ Sampling... #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 3 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 3 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 4 Iteration:    1 / 4000 [  0%]  (Warmup)  #> Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 1000 / 4000 [ 25%]  (Warmup)  #> Chain 4 Iteration: 2000 / 4000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 2001 / 4000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 3000 / 4000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 3 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 4 Iteration: 4000 / 4000 [100%]  (Sampling)  #> Chain 1 finished in 0.5 seconds. #> Chain 2 finished in 0.5 seconds. #> Chain 3 finished in 0.5 seconds. #> Chain 4 finished in 0.4 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 0.5 seconds. #> Total execution time: 0.6 seconds. #> 🫴 Use STb_save() to save the fit and chain csvs to a single RDS file. Or don't! loo_output = STb_compare(full_fit, asocial_fit, method=\"loo-psis\") #> Calculating LOO-PSIS. #> Comparing models. #> Calculating pareto-k diagnostic (only for loo-psis). print(loo_output$comparison, simplify = FALSE) #>             elpd_diff se_diff elpd_loo se_elpd_loo p_loo  se_p_loo looic  #> full_fit       0.0       0.0  -290.7      6.3         2.0    0.5    581.4 #> asocial_fit  -21.3       5.3  -312.0      3.8         0.3    0.0    624.0 #>             se_looic #> full_fit      12.5   #> asocial_fit    7.7 comparison_df <- as.data.frame(loo_output$comparison) comparison_df$model <- rownames(comparison_df)  ggplot(comparison_df, aes(x = reorder(model, elpd_diff), y = elpd_diff)) +     geom_point(size = 3) + #elpd_diff     geom_errorbar(aes(ymin = elpd_diff - se_diff,                        ymax = elpd_diff + se_diff), width = 0.2) + #SE of elpd diff     coord_flip() +     labs(x = \"Model\", y = \"ELPD Difference\", title = \"Model Comparison\") +     theme_minimal() pareto_df = as.data.frame(loo_output$pareto_diagnostics) ggplot(pareto_df, aes(x=observation, y=pareto_k, color=model))+     geom_point() +     scale_color_viridis_d(begin=0.2, end=0.7)+     geom_hline(yintercept = 0.7, linetype=\"dashed\", color=\"orange\")+     geom_hline(yintercept = 1, linetype=\"dashed\", color=\"red\")+     labs(x=\"Observation\", y=\"Pareto-k value\", title=\"Pareto-k diagnostics\")+     theme_minimal()"},{"path":"https://michaelchimento.github.io/STbayes/articles/getting_started.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting started with STbayes","text":"basics using STbayes. need event data network data minimal model. However, package flexible can make use many types data formulations. Please see “Advanced recipes” vignette demonstrations multi-network models, dynamic network models, models ILVs, transmission weights, varying effects, complex transmission, marginalizing edge-weight uncertainty.","code":""},{"path":"https://michaelchimento.github.io/STbayes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Chimento. Author, maintainer.","code":""},{"path":"https://michaelchimento.github.io/STbayes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chimento M (2025). STbayes: Organize, Generate, Fit, Analyze Bayesian Models Social Transmission. R package version 0.0.0.9000, https://michaelchimento.github.io/STbayes.","code":"@Manual{,   title = {STbayes: Organize, Generate, Fit, and Analyze Bayesian Models of Social Transmission},   author = {Michael Chimento},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://michaelchimento.github.io/STbayes}, }"},{"path":"https://michaelchimento.github.io/STbayes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Organize, Generate, Fit, and Analyze Bayesian Models of Social Transmission","text":"functions package depend cmdstanr, posterior, bayestestR, data.table loo. can install cmdstanr following instructions. Vignettes use packages NBDA (install devtools::install_github(\"whoppitt/NBDA\"), igraph, dplyr, ggplot2, ggpubr. install development version STbayes:","code":"# install devtools if not already if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"michaelchimento/STbayes\")"},{"path":"https://michaelchimento.github.io/STbayes/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Organize, Generate, Fit, and Analyze Bayesian Models of Social Transmission","text":"Importing data Generate model Fit save model Viewing model output Posterior predictive checks Model comparison","code":""},{"path":"https://michaelchimento.github.io/STbayes/index.html","id":"advanced-recipes","dir":"","previous_headings":"","what":"Advanced recipes","title":"Organize, Generate, Fit, and Analyze Bayesian Models of Social Transmission","text":"Multi-network models Individual-level variables Transmission weights Varying effects model types: OADA dTADA Edge weight uncertainty Complex Transmission Setting priors Import NBDA Objects","code":""},{"path":"https://michaelchimento.github.io/STbayes/index.html","id":"features","dir":"","previous_headings":"","what":"Features:","title":"Organize, Generate, Fit, and Analyze Bayesian Models of Social Transmission","text":"TADA (acquisition time known) OADA (acquisition order known) model types. static dynamic networks. multi-network comparison (static dynamic networks). multiple trials set, subsets, different sets individuals. constant time-varying ILVs additive multiplicative transmission models. varying effects individual strength social transmission, baseline hazard rates, user defined ILVs. easy workflow ELPD (loo-psis, waic) model comparison. propagation uncertainty network measures transmission model modeling complex transmission contagion","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"STb_compare() — STb_compare","title":"STb_compare() — STb_compare","text":"Convenience function model comparison using either loo-psis waic methods. Returns list relevant output loo functions.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STb_compare() — STb_compare","text":"","code":"STb_compare(..., model_names = NULL, method = \"loo-psis\")"},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"STb_compare() — STb_compare","text":"... CmdStanMCMC model fits comparison model_names optional list model names, otherwise taken object names method string either \"loo-psis\" \"waic\" indicate method used elpd. Defaults \"loo-psis\". Pareto diagnostics calculated WAIC.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"STb_compare() — STb_compare","text":"list containing loo_objects, comparison, pareto_diagnostics using loo-psis.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"STb_compare() — STb_compare","text":"","code":"data_list <- import_user_STb(STbayes::event_data, STbayes::edge_list) model_full <- generate_STb_model(data_list, gq = TRUE, model_type = \"full\") fit_full <- fit_STb(data_list,     model_full,     parallel_chains = 4,     chains = 4,     cores = 4,     iter = 4000,     refresh = 2000 ) # fit asocial model model_asoc <- generate_STb_model(data_list, gq = TRUE, model_type = \"asocial\") fit_asoc <- fit_STb(data_list,     model_asoc,     parallel_chains = 4,     chains = 4,     cores = 4,     iter = 4000,     refresh = 2000 ) mc <- STb_compare(fit_full, fit_asoc, method = \"loo-psis\") # view comparison table print(mc$comparison)"},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_save.html","id":null,"dir":"Reference","previous_headings":"","what":"STb_save() — STb_save","title":"STb_save() — STb_save","text":"Save STbayes fits easily, rather save fit chain csvs separately. provide message command re-load fit convenience.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STb_save() — STb_save","text":"","code":"STb_save(fit, output_dir = \"cmdstan_saves\", name = NULL)"},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"STb_save() — STb_save","text":"fit model fitted STbayes output_dir path want save name optional name use model","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"STb_save() — STb_save","text":"NULL, message successfully saved.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"STb_save() — STb_save","text":"","code":"if (FALSE) { # \\dontrun{ data_list <- import_user_STb(STbayes::event_data, STbayes::edge_list) model_obj <- generate_STb_model(data_list, gq = TRUE) fit <- fit_STb(data_list,     model_obj,     parallel_chains = 4,     chains = 4,     cores = 4,     iter = 4000,     refresh = 2000 ) STb_save(fit, output_dir = \"../data/stan_fits\", name = \"my_fit\") } # }"},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"STb_summary() — STb_summary","title":"STb_summary() — STb_summary","text":"Create useful summary table STbayes fit. Contains estimates log linear scale lambda_0 (intrinsic rate) s' (social transmission rate). Includes estimated s (relative strength social transmission).","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STb_summary() — STb_summary","text":"","code":"STb_summary(   fit,   depth = 1,   prob = 0.95,   ignore_params = c(\"lp__\", \"idx\", \"log_lik\", \"log_lik_matrix\", \"count_ST\", \"psocn_sum\",     \"acquisition_time\", \"z_ID\", \"Rho_ID\", \"v_ID\", \".chain\", \".iteration\", \".draw\",     \"s_prime\"),   digits = 3,   CI_method = c(\"HPDI\", \"PI\") )"},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"STb_summary() — STb_summary","text":"fit CmdStanMCMC model fit depth integer depth multidimensional parameters extract prob double limits HPD estimates (default = 0.95) ignore_params character vector parameters ignore digits integer digits round CI_method \"HPDI\" highest density interval \"PI\" quantiles (equal tails). Defaults HPDI.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"STb_summary() — STb_summary","text":"Summary table","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/STb_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"STb_summary() — STb_summary","text":"","code":"data_list <- import_user_STb(STbayes::event_data, STbayes::edge_list) model_obj <- generate_STb_model(data_list) fit <- fit_STb(data_list,     model_obj,     parallel_chains = 4,     chains = 4,     cores = 4,     iter = 4000,     refresh = 2000 ) STb_summary(fit, prob = 0.95, digits = 3, CI_method = \"HPDI\")"},{"path":"https://michaelchimento.github.io/STbayes/reference/check_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"check_integer() — check_integer","title":"check_integer() — check_integer","text":"Helper function check whether number integer integer-like. believe base function !","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/check_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_integer() — check_integer","text":"","code":"check_integer(x)"},{"path":"https://michaelchimento.github.io/STbayes/reference/check_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_integer() — check_integer","text":"x number vector","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/check_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_integer() — check_integer","text":"boolean values whether number integer integer-like","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/check_required_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"check_required_cols() — check_required_cols","title":"check_required_cols() — check_required_cols","text":"Helper function makes sure user put reqd cols","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/check_required_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_required_cols() — check_required_cols","text":"","code":"check_required_cols(df, required_cols, df_name = \"dataframe\")"},{"path":"https://michaelchimento.github.io/STbayes/reference/check_required_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_required_cols() — check_required_cols","text":"df dataframe required_cols vector col names df_name string name df","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/check_required_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_required_cols() — check_required_cols","text":"nothing, just errors something wrong","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/create_W_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"create_W_matrix() — create_W_matrix","title":"create_W_matrix() — create_W_matrix","text":"Helper function transform transmission weights size Z","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/create_W_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_W_matrix() — create_W_matrix","text":"","code":"create_W_matrix(t_weights, max_time)"},{"path":"https://michaelchimento.github.io/STbayes/reference/create_W_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_W_matrix() — create_W_matrix","text":"t_weights dataframe t_weight. ids across trials must present. max_time end observation period","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/create_W_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_W_matrix() — create_W_matrix","text":"W dimensions k,t,n","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/create_Z_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"create_Z_matrix() — create_Z_matrix","title":"create_Z_matrix() — create_Z_matrix","text":"Helper function create knowledge state matrix Z dims k,t,n","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/create_Z_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_Z_matrix() — create_Z_matrix","text":"","code":"create_Z_matrix(event_data, high_res, time_type = c(\"interval\", \"real\"))"},{"path":"https://michaelchimento.github.io/STbayes/reference/create_Z_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_Z_matrix() — create_Z_matrix","text":"event_data dataframe (event_data) import_NBDA_STb.R / import_user_STb.R high_res boolean time_type want summarize inter-event intervals real time","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/create_Z_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_Z_matrix() — create_Z_matrix","text":"matrix dimensions k,t,n value=0 naive t, otherwise 1","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/detect_ILV_datatype.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect ILV datatype — detect_ILV_datatype","title":"Detect ILV datatype — detect_ILV_datatype","text":"Helper function importing ILVs","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/detect_ILV_datatype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect ILV datatype — detect_ILV_datatype","text":"","code":"detect_ILV_datatype(x)"},{"path":"https://michaelchimento.github.io/STbayes/reference/detect_ILV_datatype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect ILV datatype — detect_ILV_datatype","text":"x column vector data","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/detect_ILV_datatype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect ILV datatype — detect_ILV_datatype","text":"string category variable","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/dl_sanity_check.html","id":null,"dir":"Reference","previous_headings":"","what":"dl_sanity_check() — dl_sanity_check","title":"dl_sanity_check() — dl_sanity_check","text":"Helper function check data_list","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/dl_sanity_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dl_sanity_check() — dl_sanity_check","text":"","code":"dl_sanity_check(data_list)"},{"path":"https://michaelchimento.github.io/STbayes/reference/dl_sanity_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dl_sanity_check() — dl_sanity_check","text":"data_list datalist generated import_NBDA_STb import_user_STb","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/dl_sanity_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dl_sanity_check() — dl_sanity_check","text":"NULL, just print sanity check","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_ILV.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_ILV() — extract_ILV","title":"extract_ILV() — extract_ILV","text":"Helper function extract ILV matrix back transform vectors STb format","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_ILV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_ILV() — extract_ILV","text":"","code":"extract_ILV(nbda_object, ILV_type)"},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_ILV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_ILV() — extract_ILV","text":"nbda_object NBDAdata object ILV_type character indicating types ILVs: @asocILVdata = asocial, @intILVdata = social, @multiILVdata = multiplicative (affects social asocial equally)","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_ILV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_ILV() — extract_ILV","text":"List vectors ILV","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_LOOIC.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_LOOIC() — extract_LOOIC","title":"extract_LOOIC() — extract_LOOIC","text":"Convenience quickly extract LOOIC scores. really using STb_compare().","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_LOOIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_LOOIC() — extract_LOOIC","text":"","code":"extract_LOOIC(fit)"},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_LOOIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_LOOIC() — extract_LOOIC","text":"fit STb model fit","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_LOOIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_LOOIC() — extract_LOOIC","text":"LOOIC estimate","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_WAIC.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_WAIC() — extract_WAIC","title":"extract_WAIC() — extract_WAIC","text":"Convenience function extract WAIC scores. really using STb_compare().","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_WAIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_WAIC() — extract_WAIC","text":"","code":"extract_WAIC(fit)"},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_WAIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_WAIC() — extract_WAIC","text":"fit STb model fit","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_WAIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_WAIC() — extract_WAIC","text":"WAIC estimate","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_acqTime.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_acqTime — extract_acqTime","title":"extract_acqTime — extract_acqTime","text":"Extract estimated acquisition times posterior predictive check.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_acqTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_acqTime — extract_acqTime","text":"","code":"extract_acqTime(fit, data_list, prob = 0.95, var_name = \"acquisition_time\")"},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_acqTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_acqTime — extract_acqTime","text":"fit CmdStanMCMC fit object data_list STb_data object (must include ind_id time) prob interval CI. defaults .95 var_name variable name acquisition time GQ block (default = \"acquisition_time\")","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_acqTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_acqTime — extract_acqTime","text":"Dataframe trial, individual, id, observed_time, mean/median/HPD estimated time","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_tv_ILV.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_tv_ILV() — extract_tv_ILV","title":"extract_tv_ILV() — extract_tv_ILV","text":"private function extract tv ILV matrices transform ILV_tv dataframe processing really silly way : original TV matrix impossible reconstruct NBDA objs, since NBDA saves values individuals naive. matter basic functionality, use-case wanted counterfactuals etc, one needs data. basically converts vector > matrix > vector, converted matrix import_NBDA_STb function.. However works, come back later make efficient.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_tv_ILV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_tv_ILV() — extract_tv_ILV","text":"","code":"extract_tv_ILV(nbda_object, ILV_type)"},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_tv_ILV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_tv_ILV() — extract_tv_ILV","text":"nbda_object NBDAdata object ILV_type character indicating types ILVs: @asocILVdata = asocial, @intILVdata = social, @multiILVdata = multiplicative (affects social asocial equally)","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/extract_tv_ILV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_tv_ILV() — extract_tv_ILV","text":"List vectors ILV","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/fit_STb.html","id":null,"dir":"Reference","previous_headings":"","what":"fit_STb() — fit_STb","title":"fit_STb() — fit_STb","text":"Third step analysis pipeline: Fits model using cmdstanr. fitting, consider using STb_save() store output.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/fit_STb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit_STb() — fit_STb","text":"","code":"fit_STb(data_list, model_obj, ...)"},{"path":"https://michaelchimento.github.io/STbayes/reference/fit_STb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit_STb() — fit_STb","text":"data_list list object exported import_user_STb import_NBDA_STb model_obj Can either model object exported generate_STb_model filename ... Additional arguments passed mod$sample (e.g., chains, iter_warmup, iter_sampling, adapt_delta)","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/fit_STb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fit_STb() — fit_STb","text":"CmdStanMCMC fit object","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/fit_STb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fit_STb() — fit_STb","text":"","code":"data_list <- import_user_STb(STbayes::event_data, STbayes::edge_list) model_obj <- generate_STb_model(data_list) fit <- fit_STb(data_list,     model_obj,     parallel_chains = 4,     chains = 4,     cores = 4,     iter = 4000,     refresh = 1000 )"},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_STb_model() — generate_STb_model","title":"generate_STb_model() — generate_STb_model","text":"Second step analysis pipeline: dynamically generates STAN model based input data. saving output variable, can preview formatted version R console using cat().","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_STb_model() — generate_STb_model","text":"","code":"generate_STb_model(   STb_data,   data_type = c(\"continuous_time\", \"discrete_time\", \"order\"),   model_type = c(\"full\", \"asocial\"),   intrinsic_rate = c(\"constant\", \"weibull\"),   transmission_func = c(\"standard\", \"freqdep_f\", \"freqdep_k\"),   multinetwork_s = c(\"separate\", \"shared\"),   veff_ID = c(),   gq = TRUE,   est_acqTime = FALSE,   priors = list() )"},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_STb_model() — generate_STb_model","text":"STb_data list formatted data returned STbayes_data() function data_type string specifying type data (\"continuous_time\" cTADA, \"discrete_time\" dTADA \"order\" OADA). continuous_time assumes know precisely events happened. discrete_time assumes know roughly individuals learned (within discrete period), order assumes time information. model_type string specifying model type: \"full\" \"asocial\" intrinsic_rate Define shape intrinsic rate (either \"constant\" \"weibull\"). Weibull fits extra parameter (gamma) allows time-varying event rates. transmission_func string specifying transmission function: \"standard\", \"freqdep_f\" \"freqdep_k\" frequency dependent complex contagion. Defaults \"standard\". multinetwork_s string specifying multi-network models generated. \"separate\" estimates s value network. \"shared\" generates model single s vector weights network. veff_ID Parameters estimate varying effects individuals. Default varying effects. gq Boolean indicate whether generated quantities block added (incl. ll WAIC) est_acqTime Boolean indicate whether gq block includes estimates acquisition time. moment uses 'one weird trick' accomplish support estimates non-integer learning times. priors named list strings containing priors.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_STb_model() — generate_STb_model","text":"STAN model string.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate_STb_model() — generate_STb_model","text":"","code":"# very mock data event_data <- data.frame(     id = LETTERS[1:6],     trial = c(1, 1, 1, 2, 2, 2),     time = c(0, 1, 2, 0, 1, 4),     t_end = c(3, 3, 3, 4, 4, 4) ) networks <- data.frame(     trial = c(1, 1, 1, 2, 2, 2),     from = c(\"A\", \"A\", \"B\", \"D\", \"D\", \"E\"),     to = c(\"B\", \"C\", \"C\", \"E\", \"F\", \"F\"),     kin = c(1, 0, 1, 0, 1, 1),     inverse_distance = c(0, 1, .5, .25, .1, 0) ) ILV_c <- data.frame(     id = LETTERS[1:6],     age = c(-1, -2, 0, 1, 2, 3), # continuous variables should be normalized     sex = c(0, 1, 1, 0, 1, 0), # Factor ILVs must be input as numeric     weight = c(0.5, .25, .3, 0, -.2, -.4) ) data_list <- import_user_STb(     event_data = event_data,     networks = networks,     ILV_c = ILV_c,     ILVi = c(\"age\"), # Use only 'age' for asocial rate     ILVs = c(\"sex\"), # Use only 'sex' for social rate     ILVm = c(\"weight\") # Use weight for multiplicative effect on both ) # creates full specification of cTADA model, no varying effects and default priors. model <- generate_STb_model(data_list) # estimate varying effects by ID for intrinsic and social rates. model <- generate_STb_model(data_list, veff_ID = c(\"lambda_0\", \"s\")) # creates OADA specification model <- generate_STb_model(data_list, data = \"order\") # adjust priors model <- generate_STb_model(data_list, priors = list(     log_lambda0 = \"normal(-2, 3)\",     log_sprime = \"uniform(-7, 3)\" )) # quickly inspect model code cat(model)"},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_OADA.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_STb_model_OADA() — generate_STb_model_OADA","title":"generate_STb_model_OADA() — generate_STb_model_OADA","text":"Helper function creates stan code OADA type models.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_OADA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_STb_model_OADA() — generate_STb_model_OADA","text":"","code":"generate_STb_model_OADA(   STb_data,   model_type = \"full\",   transmission_func = \"standard\",   veff_ID = c(),   gq = TRUE,   priors = list() )"},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_OADA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_STb_model_OADA() — generate_STb_model_OADA","text":"STb_data list formatted data returned STbayes_data() function model_type string specifying model type: \"asocial\" \"full\" transmission_func string specifying transmission function: \"standard\", \"freqdep_f\" \"freqdep_k\" frequency dependent complex contagion. Defaults \"standard\". veff_ID Parameters estimate varying effects individuals. Default varying effects. gq Boolean indicate whether generated quantities block added (incl. ll WAIC) priors named list strings containing prior log s f. defaults list(log_s = \"uniform(-10, 10)\", log_f = \"normal(0,1)\")","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_OADA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_STb_model_OADA() — generate_STb_model_OADA","text":"STAN model (character) customized input data.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_TADA.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_STb_model_TADA() — generate_STb_model_TADA","title":"generate_STb_model_TADA() — generate_STb_model_TADA","text":"Helper function creates stan code cTADA dTADA type models.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_TADA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_STb_model_TADA() — generate_STb_model_TADA","text":"","code":"generate_STb_model_TADA(   STb_data,   model_type = \"full\",   intrinsic_rate = \"constant\",   transmission_func = \"standard\",   dTADA = F,   veff_ID = c(),   gq = TRUE,   est_acqTime = FALSE,   priors = list() )"},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_TADA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_STb_model_TADA() — generate_STb_model_TADA","text":"STb_data list formatted data returned STbayes_data() function model_type string specifying model type: \"asocial\" \"full\" intrinsic_rate string specifying whether intrinsic rate static can change time (\"constant\", \"weibull\") transmission_func string specifying transmission function: \"standard\", \"freqdep_f\" \"freqdep_k\" complex contagion. Defaults \"standard\". Complex contagion multi-network model supported. dTADA boolean indicating whether dTADA used. veff_ID Parameters estimate varying effects individuals. Default varying effects. gq Boolean indicate whether generated quantities block added (incl. ll WAIC) est_acqTime Boolean indicate whether gq block includes estimates acquisition time. moment uses 'one weird trick' accomplish support estimates non-integer learning times. priors named list strings containing prior log baserate, s, f, k.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/generate_STb_model_TADA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_STb_model_TADA() — generate_STb_model_TADA","text":"STAN model (character) customized input data.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/get_ST_prob_term.html","id":null,"dir":"Reference","previous_headings":"","what":"get_ST_prob_term() — get_ST_prob_term","title":"get_ST_prob_term() — get_ST_prob_term","text":"Helper function generates Stan code compute P(e via ST) %ST calculation","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/get_ST_prob_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_ST_prob_term() — get_ST_prob_term","text":"","code":"get_ST_prob_term(   transmission_func,   is_distribution = FALSE,   separate_s = FALSE,   veff_ID = c(),   num_networks = 1,   s_var = \"s_prime\",   id_var = \"id\",   trial_var = \"trial\",   time_var = \"time_step\",   net_var = \"A\",   ILVs_variable_effects = \"\",   weibull_term = \"\",   high_res = F )"},{"path":"https://michaelchimento.github.io/STbayes/reference/get_ST_prob_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_ST_prob_term() — get_ST_prob_term","text":"transmission_func String (e.g. \"standard\", \"freqdep_f\", \"freqdep_k\") is_distribution Boolean: edges drawn posterior? separate_s Boolean: s estimated separately per network? veff_ID Character vector: params vary ID num_networks Integer: Number networks s_var String use s variable: e.g. \"s_prime\" id_var String id indexes: e.g., \"id\" trial_var String trial indexes: e.g., \"trial\" time_var String: e.g., \"time_step\" net_var String: e.g., \"\" ILVs_variable_effects String containing ILV effects s weibull_term String containing gamma etc high_res boolean indicating high_res","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/get_ST_prob_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_ST_prob_term() — get_ST_prob_term","text":"String Stan code GQ block accumulate psoc psocn","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/get_network_term.html","id":null,"dir":"Reference","previous_headings":"","what":"get_network_term() — get_network_term","title":"get_network_term() — get_network_term","text":"Helper function generate network terms STAN","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/get_network_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_network_term() — get_network_term","text":"","code":"get_network_term(   transmission_func = \"standard\",   is_distribution = FALSE,   separate_s = FALSE,   num_networks = 1,   veff_ID = c(),   s_var = \"s_prime\",   net_var = \"A\",   net_index = \"network\",   id_var = \"id\",   trial_var = \"trial\",   time_var = \"time_step\",   high_res = F )"},{"path":"https://michaelchimento.github.io/STbayes/reference/get_network_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_network_term() — get_network_term","text":"transmission_func simple complex transmission is_distribution user supply posterior distribution edges separate_s whether s constrained networks num_networks integer number networks veff_ID vector varying effects s_var string used represent s term (\"s_prime\" \"s_direct\") net_var string used represent network variable \"\" net_index string used index networks \"network\" id_var string used index individuals. \"id\" tada, need use \"id\" \"j\" oada trial_var string used index trial \"trial\" time_var string used index time \"time_step\" high_res boolean indicating high res","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/get_network_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_network_term() — get_network_term","text":"string stan code used model calculating network effects","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/grid_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"grid_networks() — grid_networks","title":"grid_networks() — grid_networks","text":"Helper function completes network df dyad & trial combinations.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/grid_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grid_networks() — grid_networks","text":"","code":"grid_networks(event_data, networks)"},{"path":"https://michaelchimento.github.io/STbayes/reference/grid_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grid_networks() — grid_networks","text":"event_data event df networks network df","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/grid_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"grid_networks() — grid_networks","text":"network dataframe","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_NBDA_STb.html","id":null,"dir":"Reference","previous_headings":"","what":"import_NBDA_STb() — import_NBDA_STb","title":"import_NBDA_STb() — import_NBDA_STb","text":"Create STbayes_data object nbda object","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_NBDA_STb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import_NBDA_STb() — import_NBDA_STb","text":"","code":"import_NBDA_STb(   nbda_object,   network_names = c(\"default\"),   ILVi = NULL,   ILVs = NULL,   ILVm = NULL )"},{"path":"https://michaelchimento.github.io/STbayes/reference/import_NBDA_STb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import_NBDA_STb() — import_NBDA_STb","text":"nbda_object object NBDAdata class network_names character vector descriptive names networks importing. ILVi Optional character vector ILVS considered estimating intrinsic rate. specified, taken NBDA object. ILVs Optional character vector ILVS considered estimating social transmission rate. specified, taken NBDA object. ILVm Optional character vector ILVS considered multiplicative model. specified, taken NBDA object.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_NBDA_STb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import_NBDA_STb() — import_NBDA_STb","text":"list containing properly formatted data run social transmission models.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_NBDA_STb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"import_NBDA_STb() — import_NBDA_STb","text":"","code":"nbda_object <- STbayes::tutorial4_1 data_list <- import_NBDA_STb(nbda_object, network_names = \"assoc\")"},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb.html","id":null,"dir":"Reference","previous_headings":"","what":"Import user data — import_user_STb","title":"Import user data — import_user_STb","text":"First step analysis pipeline: create STbayes data object user supplied data used generating fitting models.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import user data — import_user_STb","text":"","code":"import_user_STb(   event_data,   networks,   network_type = c(\"undirected\", \"directed\"),   ILV_c = NULL,   ILV_tv = NULL,   ILVi = NULL,   ILVs = NULL,   ILVm = NULL,   t_weights = NULL,   high_res = FALSE )"},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import user data — import_user_STb","text":"event_data dataframe columns id, trial, time, t_end networks Either dataframe, bisonr/STRAND fit, list bisonr/STRAND fits. dataframe: columns trial, , , one columns edge weights named descriptively. Optionally integer time column can provided dynamic network analysis, although networks must provided inter-event interval. network_type \"undirected\" \"directed\". ILV_c optional dataframe columns id, constant individual-level variables ILV_tv optional dataframe columns trial, id, time time-varying variables. Variable values summarize variable inter-acquisition period. ILVi Optional character vector column names ILV metadata considered estimating intrinsic rate. specified, ILV applied . ILVs Optional character vector column names ILV metadata considered estimating social transmission rate. specified, ILV applied . ILVm Optional character vector column names ILV metadata considered multiplicative model. t_weights Optional dataframe columns trial, id, time t_weight. Transmission rates represent rates production/relevant cues per inter-event period. high_res Boolean indicating whether user providing networks transmission weights per period duration=1","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import user data — import_user_STb","text":"list object containing properly formatted data run social transmission models.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import user data — import_user_STb","text":"","code":"# very mock data event_data <- data.frame(     trial = rep(1:2, each = 3),     id = LETTERS[1:6],     time = c(0, 1, 2, 0, 1, 4),     t_end = c(3, 3, 3, 4, 4, 4) ) networks <- data.frame(     trial = rep(1:2, each = 3),     from = c(\"A\", \"A\", \"B\", \"D\", \"D\", \"E\"),     to = c(\"B\", \"C\", \"C\", \"E\", \"F\", \"F\"),     kin = c(1, 0, 1, 0, 1, 1),     inverse_distance = c(0, 1, .5, .25, .1, 0) ) ILV_c <- data.frame(     id = LETTERS[1:6],     age = c(-1, -2, 0, 1, 2, 0), # continuous variables should be normalized     sex = c(0, 1, 1, 0, 1, 0), # Factor ILVs must be input as numeric     weight = c(0.5, .25, .3, 0, -.2, -.4) ) ILV_tv <- data.frame(     trial = c(rep(1, each = 9), rep(2, each = 9)),     id = c(rep(LETTERS[1:3], each = 3), rep(LETTERS[4:6], each = 3)),     # these times correspond to the inter-acquisition periods     # e.g. 1 is from [t_0 to t_1), 2 is [t_1 to t_2), 3 = [t_2 to t_3 or t_end])     time = c(rep(1:3, times = 3), rep(1:3, times = 3)),     # ensure the variable is summarizing these inter-acquisition time periods     dist_from_task = rnorm(18) ) t_weights <- data.frame(     trial = c(rep(1, each = 9), rep(2, each = 9)),     id = c(rep(LETTERS[1:3], each = 3), rep(LETTERS[4:6], each = 3)),     time = c(rep(1:3, times = 3), rep(1:3, times = 3)),     t_weight = exp(rnorm(18)) ) imported_data <- import_user_STb(     event_data = event_data,     networks = networks,     ILV_c = ILV_c,     ILV_tv = ILV_tv,     # Use 'age' and time-varying ILV 'dist_from_task' for asocial learning     ILVi = c(\"age\", \"dist_from_task\"),     # Use only 'sex' for social learning     ILVs = c(\"sex\"),     # Use weight for multiplicative effect on asocial and social learning     ILVm = c(\"weight\") )"},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb2.html","id":null,"dir":"Reference","previous_headings":"","what":"Import user data 2 — import_user_STb2","title":"Import user data 2 — import_user_STb2","text":"First step analysis pipeline: create STbayes data object user supplied data used generating fitting models. function basically used fitting models complex transmission high-resolution data. Rather pre-process high res data, just create massive data-list sent Stan. Models created function take much longer run.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import user data 2 — import_user_STb2","text":"","code":"import_user_STb2(   event_data,   networks,   network_type = c(\"undirected\", \"directed\"),   ILV_c = NULL,   ILV_tv = NULL,   ILVi = NULL,   ILVs = NULL,   ILVm = NULL,   t_weights = NULL,   high_res = FALSE )"},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import user data 2 — import_user_STb2","text":"event_data dataframe columns id, trial, time, t_end networks Either dataframe, bisonr fit, list bisonr fits. dataframe: columns trial, , , one columns edge weights named descriptively. network_type \"undirected\" \"directed\". ILV_c optional dataframe columns id, constant individual-level variables might interest ILV_tv optional dataframe columns trial, id, time time-varying variables. Variable values summarize variable inter-acquisition period. ILVi Optional character vector column names ILV metadata considered estimating intrinsic rate. specified, ILV applied . ILVs Optional character vector column names ILV metadata considered estimating social transmission rate. specified, ILV applied . ILVm Optional character vector column names ILV metadata considered multiplicative model. t_weights Optional dataframe columns trial, id, time t_weight. Transmission rates represent rates production/relevant cues per inter-event period. high_res Boolean indicating whether user providing networks transmission weights per period duration=1","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/import_user_STb2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import user data 2 — import_user_STb2","text":"list object containing properly formatted data run social transmission models.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/order_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Order params — order_params","title":"Order params — order_params","text":"Helper function ordering params STb_summary()","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/order_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order params — order_params","text":"","code":"order_params(p)"},{"path":"https://michaelchimento.github.io/STbayes/reference/order_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order params — order_params","text":"p name parameter","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/order_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order params — order_params","text":"integer indicating order","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/process_ILVs.html","id":null,"dir":"Reference","previous_headings":"","what":"process_ILVs() — process_ILVs","title":"process_ILVs() — process_ILVs","text":"Helper function takes ilv_vars creates appropriately formatted stan code","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/process_ILVs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"process_ILVs() — process_ILVs","text":"","code":"process_ILVs(   ilv_vars,   ilv_vars_clean,   veff_ID,   suffix,   STb_data,   count_start,   prior_beta )"},{"path":"https://michaelchimento.github.io/STbayes/reference/process_ILVs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_ILVs() — process_ILVs","text":"ilv_vars names ilvs prefixes ilv_vars_clean \"clean\" names ilvs without prefixes veff_ID vector parameters need veffs suffix character \"\" \"j\" STb_data user imported data count_start integer count variable indexing prior_beta string defining prior eg \"normal(0,1)\"","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/process_ILVs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_ILVs() — process_ILVs","text":"list containing different bits stan declarations","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/process_networks_x_weights_hires.html","id":null,"dir":"Reference","previous_headings":"","what":"process_networks_x_weights_hires() — process_networks_x_weights_hires","title":"process_networks_x_weights_hires() — process_networks_x_weights_hires","text":"Helper function pre-processes networks cxn x t_weights fast high-res models.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/process_networks_x_weights_hires.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"process_networks_x_weights_hires() — process_networks_x_weights_hires","text":"","code":"process_networks_x_weights_hires(event_data, t_weights, networks, D_data)"},{"path":"https://michaelchimento.github.io/STbayes/reference/process_networks_x_weights_hires.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_networks_x_weights_hires() — process_networks_x_weights_hires","text":"event_data event_data df t_weights t_weights df networks networks df D_data D_data df","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/process_networks_x_weights_hires.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_networks_x_weights_hires() — process_networks_x_weights_hires","text":"dataframe network weights pre-processed include cxn x t_weight","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/remove_duplicate_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"remove_duplicate_columns() — remove_duplicate_columns","title":"remove_duplicate_columns() — remove_duplicate_columns","text":"Helper function remove duplicated rows","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/remove_duplicate_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove_duplicate_columns() — remove_duplicate_columns","text":"","code":"remove_duplicate_columns(df)"},{"path":"https://michaelchimento.github.io/STbayes/reference/remove_duplicate_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove_duplicate_columns() — remove_duplicate_columns","text":"df dataframe possibly duplicated columns","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/remove_duplicate_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove_duplicate_columns() — remove_duplicate_columns","text":"dataframe","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/return_N_veff.html","id":null,"dir":"Reference","previous_headings":"","what":"return_N_veff() — return_N_veff","title":"return_N_veff() — return_N_veff","text":"Helper function find number parameters varying effects","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/return_N_veff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return_N_veff() — return_N_veff","text":"","code":"return_N_veff(text)"},{"path":"https://michaelchimento.github.io/STbayes/reference/return_N_veff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return_N_veff() — return_N_veff","text":"text model object (text)","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/return_N_veff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return_N_veff() — return_N_veff","text":"integer number varying effects present model","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/standardize_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"standardize_ids() — standardize_ids","title":"standardize_ids() — standardize_ids","text":"Helper function maps IDs across data networks reference","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/standardize_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"standardize_ids() — standardize_ids","text":"","code":"standardize_ids(   networks,   event_data,   ILV_c = NULL,   ILV_tv = NULL,   t_weights = NULL )"},{"path":"https://michaelchimento.github.io/STbayes/reference/standardize_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"standardize_ids() — standardize_ids","text":"networks networks dataframe columns trial, , , one columns edge weights named descriptively. event_data dataframe columns id, trial, time, t_end ILV_c optional dataframe columns id, constant individual-level variables might interest ILV_tv optional dataframe columns trial, id, time time-varying variables. t_weights Optional dataframe columns trial, id, time t_weight.","code":""},{"path":"https://michaelchimento.github.io/STbayes/reference/standardize_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"standardize_ids() — standardize_ids","text":"list dataframes filled ids","code":""}]

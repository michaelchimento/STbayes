% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_STb_model.R
\name{generate_STb_model}
\alias{generate_STb_model}
\title{generate_STb_model: Dynamically generate STAN model based on input data}
\usage{
generate_STb_model(
  STb_data,
  data_type = c("time", "order"),
  model_type = c("full", "asocial"),
  transmission_func = c("standard", "freq-dep1", "freq-dep2"),
  veff_ID = c(),
  gq = TRUE,
  est_acqTime = FALSE,
  priors = list()
)
}
\arguments{
\item{STb_data}{a list of formatted data returned from the STbayes_data() function}

\item{data_type}{string specifying the type of data you have ("time" or "order"). "time" will generate cTADA specification, "order" will generate OADA specification.}

\item{model_type}{string specifying the model type: "asocial" or "full"}

\item{transmission_func}{string specifying transmission function: "standard", "freq-dep" for frequency dependent complex contagion. Defaults to "standard".}

\item{veff_ID}{Parameters for which to estimate varying effects by individuals. Default is no varying effects.}

\item{gq}{Boolean to indicate whether the generated quantities block is added (incl. ll for WAIC)}

\item{est_acqTime}{Boolean to indicate whether gq block includes estimates for acquisition time. At the moment this uses 'one weird trick' to accomplish this and does not support estimates for non-integer learning times.}

\item{priors}{named list with strings containing the prior for log baserate, s or f. defaults to list(log_lambda_0 = "uniform(-10, 10)", log_s = "uniform(-10, 10)", log_f = "normal(0,1)")}
}
\value{
A STAN model (character) that is customized to the input data.
}
\description{
generate_STb_model: Dynamically generate STAN model based on input data
}
\examples{
#very mock data
event_data <- data.frame(
  id = c("A", "B", "C", "D", "E", "F"),
  trial = c(1, 1, 1, 2, 2, 2),
  time = c(0, 1, 2, 0, 1, 4),
  max_time = c(3, 3, 3, 4, 4, 4)
)
networks <- data.frame(
  trial = c(1, 1, 1, 2, 2, 2),
  from = c("A", "A", "B", "D", "D", "E"),
  to = c("B", "C", "C", "E", "F", "F"),
  kin = c(1, 0, 1, 0, 1, 1),
  inverse_distance = c(0, 1, .5, .25, .1, 0)
)
 ILV_c<- data.frame(
    id = LETTERS[1:6],
    age = c(-1, -2, 0, 1, 2), # continuous variables should be normalized
    sex = c(0, 1, 1, 0, 1, 0), # Factor ILVs must be input as numeric
    weight = c(0.5, .25, .3, 0, -.2, -.4)
 )
data_list <- import_user_STb(
  event_data = event_data,
  networks = networks,
  ILV_c = ILV_c,
  ILVi = c("age"), # Use only 'age' for asocial learning
  ILVs = c("sex"), # Use only 'sex' for social learning
  ILVm = c("weight") # Use weight for multiplicative effect on asocial and social learning
)

model = generate_STb_model(data_list) # creates full specification of cTADA model, no varying effects and default priors.
model = generate_STb_model(data_list, veff_ID = c("lambda_0", "s")) # estimate varying effects by ID for baseline learning rate and strength of social transmission.
model = generate_STb_model(data_list, data="order") # creates OADA specification
model = generate_STb_model(data_list, priors=list(log_lambda_0 = "normal(7, 3)", log_s = "uniform(7, 3)")) # adjust priors
print(model)
}
